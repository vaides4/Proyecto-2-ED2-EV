#include <Arduino.h>
#include "driver/ledc.h"
#include "config.h"

// interrupciones
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

// Sensor de Temperatura
float temp_mV = 0;
float temp_exacta = 0;
float temp_final = 0;

// set up the 'counter' feed
AdafruitIO_Feed *tempCanal = io.feed("Temperatura");

// Leds
#define ledRojo 26
#define ledAmarillo 25
#define ledVerde 33

#define temp 36

// display
#define a 18
#define b 23
#define c 14
#define d 13
#define e 15
#define f 19
#define g 27
#define p 12
#define d1 5
#define d2 21
#define d3 22

// Servo
#define servoPin 2

// PWM
#define canalPWM 9
#define canalPWMRojo 8
#define canalPWMVerde 7
#define canalPWMAmarillo 6

// Frecuencia PWM
#define freqPWM 50

// Resolución (bits)
#define resPWM 10

// array de pines de cada segmento y un byte donde se encuentran las combinaciones de cada numero del 0-9
int valorPin1[7] = {18, 23, 14, 13, 15, 19, 27};
byte valoresSeg[10][7] = {
    {1, 1, 1, 1, 1, 1, 0}, // 0
    {0, 1, 1, 0, 0, 0, 0}, // 1
    {1, 1, 0, 1, 1, 0, 1}, // 2
    {1, 1, 1, 1, 0, 0, 1}, // 3
    {0, 1, 1, 0, 0, 1, 1}, // 4
    {1, 0, 1, 1, 0, 1, 1}, // 5
    {1, 0, 1, 1, 1, 1, 1}, // 6
    {1, 1, 1, 0, 0, 0, 0}, // 7
    {1, 1, 1, 1, 1, 1, 1}, // 8
    {1, 1, 1, 1, 0, 1, 1}, // 9
};
int n = 0;

// valores a los que se moverá el servo
int servoPosition[] = {0, 53, 77, 103};
int z = 0;

// Interrupción motor
struct Boton1
{
  const uint8_t boton1;
  bool pressed;
  bool lastState;
};
Boton1 BOT1 = {32, false, false};

// variables de handle interrupcion
void IRAM_ATTR handle_boton()
{
  portENTER_CRITICAL_ISR(&mux);
  BOT1.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

// creación de funciones PWM y ADC
void initPWM(void);
void initPWMRojo(void);
void initPWMAmarillo(void);
void initPWMVerde(void);



// funcion para mostrar cada numero con su display
void mostrarDigito(int numero);

void setup()
{
  // start the serial connection
  Serial.begin(115200);

  // wait for serial monitor to open
  while(! Serial);

  Serial.print("Connecting to Adafruit IO");

  // connect to io.adafruit.com
  io.connect();

  // wait for a connection
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  // función PWM
  initPWM();
  initPWMAmarillo();
  initPWMRojo();
  initPWMVerde();

  // entradas botones
  pinMode(BOT1.boton1, INPUT_PULLUP);
  attachInterrupt(BOT1.boton1, handle_boton, RISING);

  // salidas
  pinMode(a, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode(c, OUTPUT);
  pinMode(d, OUTPUT);
  pinMode(e, OUTPUT);
  pinMode(f, OUTPUT);
  pinMode(g, OUTPUT);
  pinMode(p, OUTPUT);

  pinMode(d1, OUTPUT);
  pinMode(d2, OUTPUT);
  pinMode(d3, OUTPUT);

  // estado inicial de salidas
  digitalWrite(a, LOW);
  digitalWrite(b, LOW);
  digitalWrite(c, LOW);
  digitalWrite(d, LOW);
  digitalWrite(e, LOW);
  digitalWrite(f, LOW);
  digitalWrite(g, LOW);

  //ledcWrite(canalPWMRojo, 1023);
        
}

void loop()
{
  // lectura de temperatura en mV y conversión a grados centígrados
  temp_mV = analogRead(temp);
  float mapTempmV = map(temp_mV, 0, 4095, 30.0, 40.0);
  //temp_exacta = mapTempmV / 10.0;

  // Se multiplica el valor por 10, redondeando el valor para que al momento se divide 10, se consigo un decimal.
  //temp_final = round(temp_exacta * 10) / 10.0;
  temp_final = round(mapTempmV * 10) / 10.0;

  // Se convierto el valor de temperatura a un numero de 3 digitos.. ej: 35.4 a 354
  int temp_entero = temp_final * 10;
  // consigo primer numero de izquierda a derecha
  int primer_D = (temp_entero / 100) % 10;
  // segundo numero
  int segundo_D = (temp_entero / 10) % 10;
  // tercer numero
  int tercer_D = (temp_entero) % 10;

  //Serial.printf("temp map: %f, temp final: %f, boton : %u \n", mapTempmV, temp_final, BOT1);
  //Serial.println(BOT1.pressed);

  if (BOT1.pressed != BOT1.lastState)
  {
    if (BOT1.pressed)
    {
      io.run();
      // estados de temperatura
      if (temp_final > 37.0)
      {
        ledcWrite(canalPWMRojo, 1023);
        ledcWrite(canalPWMAmarillo, 0);
        ledcWrite(canalPWMVerde, 0);
        z = 3;
      }
      else if (temp_final <= 37.5 && temp_final >= 37.0)
      {
        ledcWrite(canalPWMRojo, 0);
        ledcWrite(canalPWMAmarillo, 1023);
        z = 2;
      }
      else
      {
        ledcWrite(canalPWMRojo, 0);
        ledcWrite(canalPWMAmarillo, 0);
        ledcWrite(canalPWMVerde, 1023);
        z = 1;
      }
      ledcWrite(canalPWM, servoPosition[z]);
      tempCanal->save(temp_final);
      BOT1.pressed = false;
    }
    BOT1.lastState = BOT1.pressed;
  }

  // mostrar primer numero utilizando la funciona mostrar digito
  digitalWrite(d1, HIGH);
  digitalWrite(d2, LOW);
  digitalWrite(d3, LOW);
  digitalWrite(p, LOW);
  mostrarDigito(primer_D);
  delay(5);

  // mostrar segundo numero
  digitalWrite(d1, LOW);
  digitalWrite(d3, LOW);
  digitalWrite(d2, HIGH);
  digitalWrite(p, HIGH);
  mostrarDigito(segundo_D);
  delay(5);

  // mostrar tercer numero
  digitalWrite(d1, LOW);
  digitalWrite(d2, LOW);
  digitalWrite(d3, HIGH);
  digitalWrite(p, LOW);
  mostrarDigito(tercer_D);
  delay(5);
}

void initPWM(void)
{
  ledcSetup(canalPWM, freqPWM, resPWM);
  ledcAttachPin(servoPin, canalPWM);
}

void initPWMRojo(void)
{
  ledcSetup(canalPWMRojo, freqPWM, resPWM);
  ledcAttachPin(ledRojo, canalPWMRojo);
}

void initPWMVerde(void)
{
  ledcSetup(canalPWMVerde, freqPWM, resPWM);
  ledcAttachPin(ledVerde, canalPWMVerde);
}

void initPWMAmarillo(void)
{
  ledcSetup(canalPWMAmarillo, freqPWM, resPWM);
  ledcAttachPin(ledAmarillo, canalPWMAmarillo);
}

void mostrarDigito(int numero)
{
  for (n = 0; n < 7; n++)
  {
    digitalWrite(valorPin1[n], valoresSeg[numero][n]);
  }
}
